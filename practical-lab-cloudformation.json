{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Practical Lab CloudFormation",

  "Parameters" : {
    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "Id of the VPC"
    },

    "Subnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "Subtens list"
    },

    "HostedZone" : {
      "Type" : "String",
      "Description" : "Hosted zone ending with the dot"
    },

    "Prefix" :{
      "Type" : "String",
      "Description" : "Prefix"
    },

    "AWSAccessKeyId" : {
      "Type" : "String"
    },

    "AWSSecretKey" : {
      "NoEcho" : "true",
      "Type" :"String"
    },

    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description" : "EC2 KeyPair"
    },

    "InstanceType" : {
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.micro"],
      "Description" : "EC2 instance type"
    },

    "SSHLocation": {
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "Description": "IP range allowed SSH to the EC2"
    },

    "DBClass" : {
      "Type" : "String",
      "Default" : "db.t2.micro",
      "AllowedValues" : [ "db.t1.micro", "db.t2.micro"],
      "Description" : "DB instance type"
    },

    "DBName" : {
      "Default": "dbname",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "Description" : "DB name"
    },

    "DBUser" : {
      "NoEcho": "true",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "Description" : "DB admin user"
    },

    "DBPassword" : {
      "NoEcho": "true",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "Description" : "DB admin password"
    },

    "MultiAZDatabase": {
      "Default": "false",
      "Type": "String",
      "AllowedValues" : [ "true", "false" ],
      "Description" : "Create multiAZ DB"
    },

    "EC2capacity": {
      "Default": "1",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "3",
      "Description" : "Initial number of EC2 instances"
    },

    "DBAllocatedStorage" : {
      "Default": "5",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "Description" : "DB size in GB"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t1.micro"    : { "Arch" : "NATHVM64"  },
      "t2.micro"    : { "Arch" : "NATHVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "eu-central-1"     : {"HVM64" : "ami-043097594a7df80ec"},
      "us-east-1"        : {"HVM64" : "ami-0d5eff06f840b45e9"}
    }

  },

  "Resources" : {

    "ApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Name" : "CloudFormationALB",
        "SecurityGroups" : [ {"Ref" : "EC2SecurityGroup"} ],
        "Subnets" : { "Ref" : "Subnets"}
      }
    },

    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },

    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "Name" : "CloudFormationALBTG",
        "HealthCheckPath" : "/wp-admin/install.php", 
        "HealthCheckIntervalSeconds" : 10,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 2,
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VpcId"},       
        "TargetGroupAttributes" :
          [ { "Key" : "stickiness.enabled", "Value" : "true" },
            { "Key" : "stickiness.type", "Value" : "lb_cookie" },
            { "Key" : "stickiness.lb_cookie.duration_seconds", "Value" : "30" }
        ]
      }
    },
   
    "EC2SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName" : "CloudFormationSG",
        "GroupDescription" : "HTTP + SSH",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ],
        "VpcId" : { "Ref" : "VpcId" }
      }
    },

    "ASG" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AutoScalingGroupName" : "CloudFormationASG",
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "3",
        "DesiredCapacity" : { "Ref" : "EC2capacity" },
        "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ]
      }
    },

    "myScaleOutPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
         "AdjustmentType" : "ChangeInCapacity",
         "AutoScalingGroupName" : { "Ref" : "ASG" },
         "ScalingAdjustment" : "1"
      }
    },

    "myScaleInPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
         "AdjustmentType" : "ChangeInCapacity",
         "AutoScalingGroupName" : { "Ref" : "ASG" },
         "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
         "EvaluationPeriods" : "1",
         "Statistic" : "Average",
         "Threshold" : "75",
         "AlarmDescription" : "Alarm if CPU too high",
         "Period" : "60",
         "AlarmActions" : [ { "Ref" : "myScaleOutPolicy" } ],
         "Namespace" : "AWS/EC2",
         "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ASG" }
         } ],
         "ComparisonOperator" : "GreaterThanThreshold",
         "MetricName" : "CPUUtilization"
      }
    },

    "CPUAlarmLow" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
         "EvaluationPeriods" : "1",
         "Statistic" : "Average",
         "Threshold" : "20",
         "AlarmDescription" : "Alarm if CPU too low",
         "Period" : "60",
         "AlarmActions" : [ { "Ref" : "myScaleInPolicy" } ],
         "Namespace" : "AWS/EC2",
         "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ASG" }
         } ],
         "ComparisonOperator" : "LessThanThreshold",
         "MetricName" : "CPUUtilization"
      }
    },

    "LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "LaunchConfigurationName" : "CloudFormationLC",
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "EC2SecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum update -y\n",
          "yum install -y mc\n",
          "amazon-linux-extras install -y php7.2\n",
          "yum install -y httpd\n",
          "groupadd www\n",
          "usermod -a -G www ec2-user\n",
          "cd /var/www/\n",
          "curl -O https://wordpress.org/latest.tar.gz\n",
          "tar -zxf latest.tar.gz\n",
          "rm -rf /var/www/html\n",
          "mv wordpress /var/www/html\n",
          "cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php\n",
          "cd /var/www/html/\n",
          "sed -i \"s/'database_name_here'/'",{ "Ref" : "DBName" }, "'/g\" wp-config.php\n",
          "sed -i \"s/'username_here'/'",{ "Ref" : "DBUser" }, "'/g\" wp-config.php\n",
          "sed -i \"s/'password_here'/'",{ "Ref" : "DBPassword" }, "'/g\" wp-config.php\n",
          "sed -i \"s/'localhost'/'",{ "Fn::GetAtt" : [ "DBInstance", "Endpoint.Address" ] }, "'/g\" wp-config.php\n",
          "chown -R root:apache /var/www\n",
          "chmod 2775 /var/www\n",
          "find /var/www -type d -exec chmod 2775 {} +\n",
          "find /var/www -type f -exec chmod 0664 {} +\n",
          "service httpd start\n",
          "chkconfig httpd on\n",
          "cd ~\n",
          "mkdir -p .aws\n",
          "cd .aws\n",
          "echo '[default]' > config\n",
          "echo 'region = us-east-1' >> config\n",
          "echo '[default]' > credentials\n",
          "echo 'aws_access_key_id = ",{ "Ref" : "AWSAccessKeyId" },"' >> credentials\n",
          "echo 'aws_secret_access_key = ",{ "Ref" : "AWSSecretKey" },"' >> credentials\n",
          "cd ~\n",
          "aws s3 ls ",{ "Ref" : "S3Bucket" }," > test.txt\n",
          "wget https://raw.githubusercontent.com/fongakahate/ui_config/main/test.sh\n",
          "chmod +x test.sh\n",
          "wget https://github.com/fongakahate/ui_config/raw/main/cloudfrontsite.tar.gz\n",
          "tar -zxf cloudfrontsite.tar.gz\n",
          "./test.sh\n",
          "cd cloudfront_site\n",
          "aws s3 cp ./ s3://",{ "Ref" : "S3Bucket" }," --recursive --acl public-read\n"
        ]]}}
      }
    },

    "DBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName" : "CloudFormationSGforDB",
        "GroupDescription": "EC2 to DB access",
        "SecurityGroupIngress" : [{
        "IpProtocol" : "tcp",
        "FromPort" : "3306",
        "ToPort" : "3306",
        "SourceSecurityGroupId" : { "Ref" : "EC2SecurityGroup" }
        }],
        "VpcId" : { "Ref" : "VpcId" }
      }
    },

    "DBInstance" : {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName"            : { "Ref" : "DBName" },
        "Engine"            : "MySQL",
        "MultiAZ"           : { "Ref": "MultiAZDatabase" },
        "MasterUsername"    : { "Ref" : "DBUser" },
        "MasterUserPassword": { "Ref" : "DBPassword" },
        "DBInstanceClass"   : { "Ref" : "DBClass" },
        "AllocatedStorage"  : { "Ref" : "DBAllocatedStorage" },
        "VPCSecurityGroups" : [{ "Fn::GetAtt": [ "DBEC2SecurityGroup", "GroupId" ]}]
      }
    },

    "MyHostedZone": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
         "HostedZoneConfig": {
            "Comment": "Hosted Zone"
         },
         "Name": { "Ref" : "HostedZone" }
      }
    },

    "myDNS" : {
      "Type" : "AWS::Route53::RecordSetGroup",
      "Properties" : {
        "HostedZoneId" : { "Fn::GetAtt" : ["MyHostedZone", "Id"] },
        "RecordSets" : [
          {
            "Name" : { "Fn::Join" : [ ".", [ { "Ref" : "Prefix" }, { "Ref" : "HostedZone" } ] ] },
            "Type" : "A",
            "AliasTarget" : {
                "HostedZoneId" : { "Fn::GetAtt" : ["ApplicationLoadBalancer", "CanonicalHostedZoneID"] },
                "DNSName" : { "Fn::GetAtt" : ["ApplicationLoadBalancer","DNSName"] }
            }
          }
        ]
      }
    },
  
    "S3Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "PublicRead",
        "WebsiteConfiguration" : {
          "IndexDocument" : "index.html",
          "ErrorDocument" : "error.html"      
         }
      }
    },
    
    "S3Policy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
         "PolicyDocument" : {
            "Version":"2012-10-17",
            "Statement":[{
         "Sid":"PublicReadGetObject",
               "Effect":"Allow",
         "Principal": "*",
               "Action":["s3:GetObject"],
               "Resource" : { "Fn::Join" : [ 
               "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" } , "/*" ]
               ] }
             }]
         },
        "Bucket" : { "Ref" : "S3Bucket" }
      }
    },

    "CloudFrontDistribution" : {
      "Type" : "AWS::CloudFront::Distribution",
      "Properties" : {
          "DistributionConfig" : {
              "Origins" : [ {
                  "DomainName" : { "Fn::Select" : [ 1, { "Fn::Split" : [ "//", { "Fn::GetAtt" : [ "S3Bucket", "WebsiteURL" ] } ] } ] },
                  "Id" : { "Ref" : "S3Bucket" },
                  "CustomOriginConfig" : {
                    "HTTPPort" : "80",
                    "HTTPSPort" : "443",
                    "OriginProtocolPolicy" : "match-viewer"
                  } 
              }],
              "Enabled" : "true",
              "DefaultRootObject" : "index.html",
              "DefaultCacheBehavior" : {
                  "TargetOriginId" : { "Ref" : "S3Bucket" },
                  "ForwardedValues" : {
                      "QueryString" : "false",
                      "Cookies" : { "Forward" : "all" }
                  },
                  "ViewerProtocolPolicy" : "allow-all"
              },
             "PriceClass" : "PriceClass_All",
             "ViewerCertificate" : { "CloudFrontDefaultCertificate" : "true" }  
          }
      }
    }
    
  },

  "Outputs" : {
    "S3URL" : {
      "Value" : { "Fn::GetAtt" : [ "S3Bucket", "WebsiteURL" ] },
      "Description" : "S3 address"
    },
    "CloudfrontURL" : {
      "Value" : { "Fn::GetAtt" : [ "CloudFrontDistribution", "DomainName" ] },
      "Description" : "Cloudfront address"
    },
    "ALBURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ApplicationLoadBalancer", "DNSName" ]} ]]},
      "Description" : "WordPress ALB"
    }
  } 

}